 1.   Чтобы отказаться от изменений в файлах, находящихся в рабочем каталоге, можно использовать команду git checkout -- <имя_файла> для каждого файла, который вы хотите отменить. Например, git checkout -- file.txt откатит изменения в файле "file.txt" до последнего коммита.

2.    Чтобы вернуть файл из индекса в рабочий каталог, можно использовать команду git restore --staged <имя_файла>. Например, git restore --staged file.txt вернет файл "file.txt" из индекса в рабочий каталог.

3.    Чтобы отменить ошибочный коммит, можно использовать команду git revert <хеш_коммита>. Например, git revert abc123 создаст новый коммит, который отменяет изменения, внесенные коммитом с хешем "abc123". Это сохранит историю коммитов, но отменит изменения из указанного коммита.

4.    Чтобы создать новую ветку и переключиться в нее, можно использовать команду git checkout -b <имя_ветки>. Например, git checkout -b new-branch создаст новую ветку с именем "new-branch" и переключит вас на нее.

5.    Fast-forward merge (слияние без конфликтов) происходит, когда история изменений в целевой ветке не имеет новых коммитов, которые отсутствуют в исходной ветке. В этом случае Git просто перемещает указатель целевой ветки на последний коммит из исходной ветки.

    Non fast-forward merge (слияние с конфликтами) происходит, когда в целевой ветке есть новые коммиты, отсутствующие в исходной ветке. В этом случае Git создает новый коммит слияния, который объединяет изменения из обеих веток.

6.    Конфликт слияния веток возникает, когда Git не может автоматически объединить изменения из разных веток. Это происходит, когда один и тот же участок кода был изменен в обеих ветках. Для разрешения конфликта вам необходимо вручную отредактировать конфликтующие файлы, разрешив различия и выбрав, какие изменения должны быть сохранены. После редактирования файлов вы должны добавить их в индекс с помощью команды git add и закоммитить изменения.

7.    Да, ветку можно удалить с помощью команды git branch -d <имя_ветки>. Например, git branch -d old-branch удалит ветку с именем "old-branch". Если ветка содержит непринятые изменения, Git выдаст предупреждение. Если вы хотите удалить ветку с непринятыми изменениями, вы можете использовать команду git branch -D <имя_ветки>, где -D принудительно удаляет ветку без предупреждений.